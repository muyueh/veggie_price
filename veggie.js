// Generated by LiveScript 1.2.0
var ref$, take, map, keys, parseDate, shNaN, typShNaN, view, lsmkt, lssbtype, lstyphon, lscolor, datechage, datebetween;
ref$ = require("prelude-ls"), take = ref$.take, map = ref$.map, keys = ref$.keys;
parseDate = function(string){
  var y, m, d;
  y = string.split("年")[0];
  m = string.split("年")[1].split("月")[0];
  d = string.split("月")[1].split("日")[0];
  return new Date(((+y) + 1911) + " " + m + " " + d);
};
shNaN = {
  "date": true,
  "mktname": true,
  "sbtype": true,
  "transformation": true,
  "middleprice": false,
  "quantity": false
};
typShNaN = {
  "alertDate": true,
  "force7km": null,
  "force10km": null,
  "id": false,
  "level": true,
  "maxMS": false,
  "minhPa": false,
  "name": true,
  "nameEn": true,
  "numAlert": false,
  "path": null,
  "year": false
};
view = "middleprice";
lsmkt = {};
lssbtype = {};
lstyphon = {};
lscolor = {};
datechage = function(date, inc){
  var d;
  d = new Date(date);
  return new Date(d.setDate(d.getDate() + inc));
};
datebetween = function(start, end){
  var result, itrdate;
  result = [];
  itrdate = new Date(start);
  while (end - itrdate > 0) {
    result.push(itrdate);
    itrdate = datechage(itrdate, 1);
  }
  result.push(itrdate);
  return result;
};
d3.tsv("./typhon.tsv", function(err, typhonData){
  var color;
  typhonData = typhonData.filter(function(it){
    var tp, alert;
    for (tp in it) {
      if (typShNaN[tp] !== null && isNaN(it[tp]) !== typShNaN[tp]) {
        return false;
      } else if (!typShNaN[tp]) {
        it[tp] = +it[tp];
      }
    }
    alert = it.alertDate.split("～");
    it.start = new Date(it.year, alert[0].split("/")[0], alert[0].split("/")[1]);
    it.end = new Date(it.year, alert[1].split("/")[0], alert[1].split("/")[1]);
    it.during = datebetween(it.start, it.end);
    it.waybefore = datebetween(datechage(it.start, -10), datechage(it.start, -5));
    it.before = datebetween(datechage(it.start, -5), it.start);
    it.after = datebetween(it.end, datechage(it.end, +5));
    it.waybefore.map(function(it){
      return lstyphon[it] = "-10";
    });
    it.before.map(function(it){
      return lstyphon[it] = "-5";
    });
    it.after.map(function(it){
      return lstyphon[it] = "+5";
    });
    it.during.map(function(it){
      return lstyphon[it] = "T";
    });
    return true;
  });
  color = d3.scale.category20();
  return d3.tsv("./data/SD洋蔥.tsv", function(err, tsvData){
    var margin, w, h, scaleX, scaleY, line, fltrData, canvas, canvasWidth, canvasHeight, ctx, canvasData, drawPixel, updateCanvas, weekDayTable, barPriYear, barPriMonth, barPriWeek, barPriMkt, barPriSb, barPriTyp, barQuanYear, barQuanMonth, barQuanWeek, barQuanMkt, barQyanSb, barQuanTyp, ndx, all, sml, yearDim, monthDim, weekdayDim, mktDim, sbDim, tyDim, averageAdd, averageRemove, averageInitial, averageQuanAdd, averageQuanRemove, averageQuanInitial, priceYear, priceMonth, priceWeekDay, priceMkt, priceSb, priceTy, quanYear, quanMonth, quanWeekDay, quanMkt, quanSb, quanTy, barWidth, barHeight, marginJson, colorBike, colorBike2, yearExt, bpy, bqy, updateGraph;
    tsvData = tsvData.filter(function(it){
      var tp, typhon;
      for (tp in it) {
        if (isNaN(it[tp]) !== shNaN[tp]) {
          return false;
        } else if (!shNaN[tp]) {
          it[tp] = +it[tp];
        }
      }
      if (it.mktname === "台北一") {
        it.mktname = "北一";
      } else if (it.mktname === "台北二") {
        it.mktname = "北二";
      } else {
        it.mktname = take(2, it.mktname);
      }
      if (lsmkt[it.mktname] === undefined) {
        lsmkt[it.mktname] = true;
      }
      if (lssbtype[it.sbtype] === undefined) {
        lssbtype[it.sbtype] = true;
      }
      it.date = parseDate(it.date);
      typhon = lstyphon[it.date + ""];
      it.status = typhon !== undefined ? typhon : "na";
      return true;
    }).sort(function(a, b){
      return a.date - b.date;
    });
    console.log(tsvData);
    margin = {
      top: 10,
      left: 10,
      right: 20,
      bottom: 20
    };
    w = 2000 - margin.left - margin.right;
    h = 400 - margin.top - margin.bottom;
    scaleX = d3.time.scale().range([0, w]).domain(d3.extent(tsvData.map(function(it){
      return it.date;
    })));
    scaleY = d3.scale.linear().domain([0, 150]).range([h, 0]);
    line = d3.svg.line().x(function(it){
      return scaleX(it.date);
    }).y(function(it){
      return scaleY(it.middleprice);
    });
    fltrData = tsvData;
    d3.select("body").append("canvas").attr({
      "width": w,
      "height": h,
      "id": "yearvsvalue"
    });
    canvas = document.getElementById("yearvsvalue");
    canvasWidth = canvas.width;
    canvasHeight = canvas.height;
    ctx = canvas.getContext("2d");
    canvasData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);
    drawPixel = function(x, y, r, g, b, a){
      var index;
      index = (x + y * canvasWidth) * 4;
      canvasData.data[index + 0] = r;
      canvasData.data[index + 1] = g;
      canvasData.data[index + 2] = b;
      return canvasData.data[index + 3] = a;
    };
    updateCanvas = function(){
      return ctx.putImageData(canvasData, 0, 0);
    };
    weekDayTable = ["Sun.", "Mon.", "Tue.", "Wed.", "Thu.", "Fri.", "Sat."];
    barPriYear = dc.barChart('.pricePerYear');
    barPriMonth = dc.barChart('.pricePerMonth');
    barPriWeek = dc.barChart('.pricePerWeekDay');
    barPriMkt = dc.barChart('.pricePerMkt');
    barPriSb = dc.barChart('.pricePerSb');
    barPriTyp = dc.barChart('.pricePerTyp');
    barQuanYear = dc.barChart('.quanPerYear');
    barQuanMonth = dc.barChart('.quanPerMonth');
    barQuanWeek = dc.barChart('.quanPerWeekDay');
    barQuanMkt = dc.barChart('.quanPerMkt');
    barQyanSb = dc.barChart('.quanPerSb');
    barQuanTyp = dc.barChart('.quanPerTyp');
    ndx = crossfilter(tsvData);
    all = ndx.groupAll();
    sml = {};
    yearDim = ndx.dimension(function(it){
      return it.date.getFullYear();
    });
    monthDim = ndx.dimension(function(it){
      return it.date.getMonth();
    });
    weekdayDim = ndx.dimension(function(it){
      return weekDayTable[it.date.getDay()];
    });
    mktDim = ndx.dimension(function(it){
      return it.mktname;
    });
    sbDim = ndx.dimension(function(it){
      return it.sbtype;
    });
    tyDim = ndx.dimension(function(it){
      return it.status;
    });
    averageAdd = function(p, v){
      ++p.count;
      p.sum += v.middleprice;
      p.average = p.count ? Math.floor(p.sum / p.count) : 0;
      return p;
    };
    averageRemove = function(p, v){
      --p.count;
      p.sum -= v.middleprice;
      p.average = p.count ? Math.floor(p.sum / p.count) : 0;
      return p;
    };
    averageInitial = function(){
      return {
        count: 0,
        sum: 0,
        average: 0
      };
    };
    averageQuanAdd = function(p, v){
      ++p.count;
      p.sum += v.quantity;
      p.average = p.count ? Math.floor(p.sum / p.count) : 0;
      return p;
    };
    averageQuanRemove = function(p, v){
      --p.count;
      p.sum -= v.quantity;
      p.average = p.count ? Math.floor(p.sum / p.count) : 0;
      return p;
    };
    averageQuanInitial = function(){
      return {
        count: 0,
        sum: 0,
        average: 0
      };
    };
    priceYear = yearDim.group().reduce(averageAdd, averageRemove, averageInitial);
    priceMonth = monthDim.group().reduce(averageAdd, averageRemove, averageInitial);
    priceWeekDay = weekdayDim.group().reduce(averageAdd, averageRemove, averageInitial);
    priceMkt = mktDim.group().reduce(averageAdd, averageRemove, averageInitial);
    priceSb = sbDim.group().reduce(averageAdd, averageRemove, averageInitial);
    priceTy = tyDim.group().reduce(averageAdd, averageRemove, averageInitial);
    quanYear = yearDim.group().reduce(averageQuanAdd, averageQuanRemove, averageQuanInitial);
    quanMonth = monthDim.group().reduce(averageQuanAdd, averageQuanRemove, averageQuanInitial);
    quanWeekDay = weekdayDim.group().reduce(averageQuanAdd, averageQuanRemove, averageQuanInitial);
    quanMkt = mktDim.group().reduce(averageQuanAdd, averageQuanRemove, averageQuanInitial);
    quanSb = sbDim.group().reduce(averageQuanAdd, averageQuanRemove, averageQuanInitial);
    quanTy = tyDim.group().reduce(averageQuanAdd, averageQuanRemove, averageQuanInitial);
    barWidth = 300;
    barHeight = 150;
    marginJson = {
      "top": 10,
      "right": 10,
      "left": 80,
      "bottom": 20
    };
    colorBike = d3.rgb("rgb(255, 127, 14)").darker(1);
    colorBike2 = d3.rgb("rgb(255, 127, 14)").darker(2);
    yearExt = d3.extent(tsvData.map(function(it){
      return it.date.getFullYear();
    }));
    console.log(yearExt);
    bpy = barPriYear.width(barWidth + 100).height(barHeight).margins(marginJson).dimension(yearDim).group(priceYear).valueAccessor(function(it){
      return it.value.average;
    }).x(d3.scale.linear().domain(yearExt)).elasticY(true).colors(function(){
      return colorBike;
    }).on("filtered", function(){
      return updateGraph();
    });
    bpy.yAxis().ticks(3);
    bpy.xAxis().ticks(3);
    barPriMonth.width(barWidth + 60).height(barHeight).margins(marginJson).dimension(monthDim).group(priceMonth).valueAccessor(function(it){
      return it.value.average;
    }).x(d3.scale.linear().domain([0, 12])).elasticY(true).colors(function(){
      return colorBike;
    }).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    barPriWeek.width(barWidth).height(barHeight).margins(marginJson).dimension(weekdayDim).group(priceWeekDay).valueAccessor(function(it){
      return it.value.average;
    }).x(d3.scale.ordinal().domain(weekDayTable)).xUnits(dc.units.ordinal).gap(4).elasticY(true).colors(colorBike).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    barPriMkt.width(keys(lsmkt).length * 65).height(barHeight).margins(marginJson).dimension(mktDim).group(priceMkt).valueAccessor(function(it){
      return it.value.average;
    }).x(d3.scale.ordinal().domain(keys(lsmkt))).xUnits(dc.units.ordinal).gap(10).elasticY(true).colors(colorBike).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    barPriSb.width(keys(lssbtype).length * 60).height(barHeight).margins(marginJson).dimension(sbDim).group(priceSb).valueAccessor(function(it){
      return it.value.average;
    }).x(d3.scale.ordinal().domain(keys(lssbtype))).xUnits(dc.units.ordinal).gap(4).elasticY(true).colors(colorBike).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    barPriTyp.width(400).height(barHeight).margins(marginJson).dimension(tyDim).group(priceTy).valueAccessor(function(it){
      return it.value.average;
    }).x(d3.scale.ordinal().domain(["na", "-10", "-5", "T", "+5"])).xUnits(dc.units.ordinal).gap(30).elasticY(true).colors(colorBike).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    bqy = barQuanYear.width(barWidth + 100).height(barHeight).margins(marginJson).dimension(yearDim).group(quanYear).valueAccessor(function(it){
      return it.value.average;
    }).x(d3.scale.linear().domain(yearExt)).elasticY(true).colors(function(){
      return colorBike2;
    }).on("filtered", function(){
      return updateGraph();
    });
    bqy.yAxis().ticks(3);
    bqy.xAxis().ticks(3);
    barQuanMonth.width(barWidth + 60).height(barHeight).margins(marginJson).dimension(monthDim).valueAccessor(function(it){
      return it.value.average;
    }).group(quanMonth).x(d3.scale.linear().domain([0, 12])).elasticY(true).colors(function(){
      return colorBike2;
    }).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    barQuanWeek.width(barWidth).height(barHeight).margins(marginJson).dimension(weekdayDim).valueAccessor(function(it){
      return it.value.average;
    }).group(quanWeekDay).x(d3.scale.ordinal().domain(weekDayTable)).xUnits(dc.units.ordinal).gap(4).elasticY(true).colors(colorBike2).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    barQuanMkt.width(keys(lsmkt).length * 65).height(barHeight).margins(marginJson).dimension(mktDim).valueAccessor(function(it){
      return it.value.average;
    }).group(quanMkt).x(d3.scale.ordinal().domain(keys(lsmkt))).xUnits(dc.units.ordinal).gap(10).elasticY(true).colors(colorBike2).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    barQyanSb.width(keys(lssbtype).length * 60).height(barHeight).margins(marginJson).dimension(sbDim).valueAccessor(function(it){
      return it.value.average;
    }).group(quanSb).x(d3.scale.ordinal().domain(keys(lssbtype))).xUnits(dc.units.ordinal).gap(4).elasticY(true).colors(colorBike2).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    barQuanTyp.width(400).height(barHeight).margins(marginJson).dimension(tyDim).group(quanTy).valueAccessor(function(it){
      return it.value.average;
    }).x(d3.scale.ordinal().domain(["na", "-10", "-5", "T", "+5"])).xUnits(dc.units.ordinal).gap(30).elasticY(true).colors(colorBike2).on("filtered", function(){
      return updateGraph();
    }).yAxis().ticks(3);
    updateGraph = function(){
      monthDim.top(Infinity).map(function(it){
        var c;
        if (lscolor[color(it.mktname)] === undefined) {
          lscolor[color(it.mktname)] = d3.rgb(color(it.mktname));
        }
        c = lscolor[color(it.mktname)];
        return drawPixel(~~scaleX(it.date), ~~scaleY(it[view]), c.r, c.g, c.b, 255);
      });
      return updateCanvas();
    };
    dc.renderAll();
    return updateGraph();
  });
});